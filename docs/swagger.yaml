definitions:
  client.Stream:
    properties:
      backend_user_id:
        type: integer
      game_id:
        type: string
      game_name:
        type: string
      id:
        type: string
      is_mature:
        type: boolean
      language:
        type: string
      started_at:
        type: string
      tag_ids:
        items:
          type: string
        type: array
      tags:
        items:
          type: string
        type: array
      thumbnail_url:
        type: string
      title:
        type: string
      type:
        type: string
      user_id:
        type: string
      user_login:
        type: string
      user_name:
        type: string
      viewer_count:
        type: integer
    type: object
  controller.ApplicationStatus:
    enum:
    - applied
    - accepted
    - waitlisted
    - none
    type: string
    x-enum-varnames:
    - ApplicationStatusApplied
    - ApplicationStatusAccepted
    - ApplicationStatusWaitlisted
    - ApplicationStatusNone
  controller.CategoryCreate:
    properties:
      id:
        type: integer
      name:
        type: string
      parent_id:
        type: integer
      scoring_preset_id:
        type: integer
    required:
    - name
    - parent_id
    type: object
  controller.CategoryResponse:
    properties:
      id:
        type: integer
      name:
        type: string
      objectives:
        items:
          $ref: '#/definitions/controller.ObjectiveResponse'
        type: array
      scoring_preset_id:
        type: integer
      sub_categories:
        items:
          $ref: '#/definitions/controller.CategoryResponse'
        type: array
    required:
    - id
    - name
    - objectives
    - sub_categories
    type: object
  controller.ConditionCreate:
    properties:
      field:
        allOf:
        - $ref: '#/definitions/repository.ItemField'
        enum:
        - BASE_TYPE
        - NAME
        - TYPE_LINE
        - RARITY
        - ILVL
        - FRAME_TYPE
        - TALISMAN_TIER
        - ENCHANT_MODS
        - EXPLICIT_MODS
        - IMPLICIT_MODS
        - CRAFTED_MODS
        - FRACTURED_MODS
        - SIX_LINK
      id:
        type: integer
      objective_id:
        type: integer
      operator:
        allOf:
        - $ref: '#/definitions/repository.Operator'
        enum:
        - EQ
        - NEQ
        - GT
        - GTE
        - LT
        - LTE
        - IN
        - NOT_IN
        - MATCHES
        - CONTAINS
        - CONTAINS_ALL
        - CONTAINS_MATCH
        - CONTAINS_ALL_MATCHES
      value:
        type: string
    required:
    - field
    - objective_id
    - operator
    - value
    type: object
  controller.ConditionResponse:
    properties:
      field:
        $ref: '#/definitions/repository.ItemField'
      id:
        type: integer
      operator:
        $ref: '#/definitions/repository.Operator'
      value:
        type: string
    required:
    - field
    - id
    - operator
    - value
    type: object
  controller.DiscordBotLoginBody:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  controller.EventCreate:
    properties:
      application_start_time:
        type: string
      event_end_time:
        type: string
      event_start_time:
        type: string
      id:
        type: integer
      is_current:
        type: boolean
      max_size:
        type: integer
      name:
        type: string
    required:
    - application_start_time
    - event_end_time
    - event_start_time
    - max_size
    - name
    type: object
  controller.EventResponse:
    properties:
      application_start_time:
        type: string
      event_end_time:
        type: string
      event_start_time:
        type: string
      id:
        type: integer
      is_current:
        type: boolean
      max_size:
        type: integer
      name:
        type: string
      scoring_category_id:
        type: integer
      teams:
        items:
          $ref: '#/definitions/controller.TeamResponse'
        type: array
    required:
    - application_start_time
    - event_end_time
    - event_start_time
    - id
    - is_current
    - max_size
    - name
    - scoring_category_id
    - teams
    type: object
  controller.EventStatusResponse:
    properties:
      application_status:
        $ref: '#/definitions/controller.ApplicationStatus'
      team_id:
        type: integer
    required:
    - application_status
    type: object
  controller.MinimalUserResponse:
    properties:
      display_name:
        type: string
      id:
        type: integer
    required:
    - display_name
    - id
    type: object
  controller.NonSensitiveUserResponse:
    properties:
      account_name:
        type: string
      discord_id:
        type: string
      discord_name:
        type: string
      display_name:
        type: string
      id:
        type: integer
      twitch_id:
        type: string
      twitch_name:
        type: string
    required:
    - display_name
    - id
    type: object
  controller.ObjectiveCreate:
    properties:
      aggregation:
        $ref: '#/definitions/repository.AggregationType'
      category_id:
        type: integer
      conditions:
        items:
          $ref: '#/definitions/controller.ConditionCreate'
        type: array
      extra:
        type: string
      id:
        type: integer
      name:
        type: string
      number_field:
        $ref: '#/definitions/repository.NumberField'
      objective_type:
        $ref: '#/definitions/repository.ObjectiveType'
      required_number:
        type: integer
      scoring_preset_id:
        type: integer
      valid_from:
        type: string
      valid_to:
        type: string
    required:
    - aggregation
    - category_id
    - conditions
    - name
    - number_field
    - objective_type
    - required_number
    type: object
  controller.ObjectiveResponse:
    properties:
      aggregation:
        $ref: '#/definitions/repository.AggregationType'
      category_id:
        type: integer
      conditions:
        items:
          $ref: '#/definitions/controller.ConditionResponse'
        type: array
      extra:
        type: string
      id:
        type: integer
      name:
        type: string
      number_field:
        $ref: '#/definitions/repository.NumberField'
      objective_type:
        $ref: '#/definitions/repository.ObjectiveType'
      required_number:
        type: integer
      scoring_preset_id:
        type: integer
      valid_from:
        type: string
      valid_to:
        type: string
    required:
    - aggregation
    - category_id
    - conditions
    - extra
    - id
    - name
    - number_field
    - objective_type
    - required_number
    type: object
  controller.ScoreResponse:
    properties:
      finished:
        type: boolean
      id:
        type: integer
      number:
        type: integer
      points:
        type: integer
      rank:
        type: integer
      team_id:
        type: integer
      timestamp:
        type: string
      type:
        $ref: '#/definitions/scoring.ScoreType'
      user_id:
        type: integer
    required:
    - finished
    - id
    - number
    - points
    - rank
    - team_id
    - timestamp
    - type
    - user_id
    type: object
  controller.ScoringPresetCreate:
    properties:
      description:
        type: string
      event_id:
        type: integer
      id:
        type: integer
      name:
        type: string
      points:
        items:
          type: number
        type: array
      scoring_method:
        $ref: '#/definitions/repository.ScoringMethod'
      type:
        $ref: '#/definitions/repository.ScoringPresetType'
    required:
    - event_id
    - name
    - points
    - scoring_method
    - type
    type: object
  controller.ScoringPresetResponse:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      points:
        items:
          type: number
        type: array
      scoring_method:
        $ref: '#/definitions/repository.ScoringMethod'
      type:
        $ref: '#/definitions/repository.ScoringPresetType'
    required:
    - description
    - id
    - name
    - points
    - scoring_method
    - type
    type: object
  controller.SignupResponse:
    properties:
      expected_playtime:
        $ref: '#/definitions/repository.ExpectedPlayTime'
      id:
        type: integer
      team_id:
        type: integer
      timestamp:
        type: string
      user:
        $ref: '#/definitions/controller.NonSensitiveUserResponse'
    required:
    - expected_playtime
    - id
    - timestamp
    - user
    type: object
  controller.SubmissionResponse:
    properties:
      approval_status:
        $ref: '#/definitions/repository.ApprovalStatus'
      comment:
        type: string
      id:
        type: integer
      number:
        type: integer
      objective:
        $ref: '#/definitions/controller.ObjectiveResponse'
      proof:
        type: string
      review_comment:
        type: string
      reviewer_id:
        type: integer
      team_id:
        type: integer
      timestamp:
        type: string
      user:
        $ref: '#/definitions/controller.NonSensitiveUserResponse'
    required:
    - approval_status
    - comment
    - id
    - number
    - proof
    - timestamp
    type: object
  controller.TeamResponse:
    properties:
      allowed_classes:
        items:
          type: string
        type: array
      event_id:
        type: integer
      id:
        type: integer
      name:
        type: string
    required:
    - allowed_classes
    - event_id
    - id
    - name
    type: object
  controller.UserAdminResponse:
    properties:
      account_name:
        type: string
      discord_id:
        type: string
      discord_name:
        type: string
      display_name:
        type: string
      id:
        type: integer
      permissions:
        items:
          $ref: '#/definitions/repository.Permission'
        type: array
      twitch_id:
        type: string
      twitch_name:
        type: string
    required:
    - display_name
    - id
    - permissions
    type: object
  controller.UserResponse:
    properties:
      account_name:
        type: string
      discord_id:
        type: string
      discord_name:
        type: string
      display_name:
        type: string
      id:
        type: integer
      permissions:
        items:
          $ref: '#/definitions/repository.Permission'
        type: array
      token_expiry_timestamp:
        type: string
      twitch_id:
        type: string
      twitch_name:
        type: string
    required:
    - display_name
    - id
    type: object
  controller.UserUpdate:
    properties:
      display_name:
        type: string
    required:
    - display_name
    type: object
  repository.AggregationType:
    enum:
    - SUM_LATEST
    - EARLIEST
    - EARLIEST_FRESH_ITEM
    - MAXIMUM
    - MINIMUM
    type: string
    x-enum-varnames:
    - SUM_LATEST
    - EARLIEST
    - EARLIEST_FRESH_ITEM
    - MAXIMUM
    - MINIMUM
  repository.ApprovalStatus:
    enum:
    - APPROVED
    - REJECTED
    - PENDING
    type: string
    x-enum-varnames:
    - APPROVED
    - REJECTED
    - PENDING
  repository.ExpectedPlayTime:
    enum:
    - VERY_LOW
    - LOW
    - MEDIUM
    - HIGH
    - VERY_HIGH
    - EXTREME
    - NO_LIFE
    type: string
    x-enum-varnames:
    - VeryLow
    - Low
    - Medium
    - High
    - VeryHigh
    - Extreme
    - NoLife
  repository.ItemField:
    enum:
    - BASE_TYPE
    - NAME
    - TYPE_LINE
    - RARITY
    - ILVL
    - FRAME_TYPE
    - TALISMAN_TIER
    - ENCHANT_MODS
    - EXPLICIT_MODS
    - IMPLICIT_MODS
    - CRAFTED_MODS
    - FRACTURED_MODS
    - SIX_LINK
    type: string
    x-enum-varnames:
    - BASE_TYPE
    - NAME
    - TYPE_LINE
    - RARITY
    - ILVL
    - FRAME_TYPE
    - TALISMAN_TIER
    - ENCHANT_MODS
    - EXPLICIT_MODS
    - IMPLICIT_MODS
    - CRAFTED_MODS
    - FRACTURED_MODS
    - SIX_LINK
  repository.NumberField:
    enum:
    - STACK_SIZE
    - PLAYER_LEVEL
    - PLAYER_XP
    - SUBMISSION_VALUE
    type: string
    x-enum-varnames:
    - STACK_SIZE
    - PLAYER_LEVEL
    - PLAYER_XP
    - SUBMISSION_VALUE
  repository.ObjectiveType:
    enum:
    - ITEM
    - PLAYER
    - SUBMISSION
    type: string
    x-enum-varnames:
    - ITEM
    - PLAYER
    - SUBMISSION
  repository.Operator:
    enum:
    - EQ
    - NEQ
    - GT
    - GTE
    - LT
    - LTE
    - IN
    - NOT_IN
    - MATCHES
    - CONTAINS
    - CONTAINS_ALL
    - CONTAINS_MATCH
    - CONTAINS_ALL_MATCHES
    type: string
    x-enum-varnames:
    - EQ
    - NEQ
    - GT
    - GTE
    - LT
    - LTE
    - IN
    - NOT_IN
    - MATCHES
    - CONTAINS
    - CONTAINS_ALL
    - CONTAINS_MATCH
    - CONTAINS_ALL_MATCHES
  repository.Permission:
    enum:
    - admin
    - command_team
    type: string
    x-enum-varnames:
    - PermissionAdmin
    - PermissionCommandTeam
  repository.ScoringMethod:
    enum:
    - PRESENCE
    - POINTS_FROM_VALUE
    - RANKED_TIME
    - RANKED_VALUE
    - RANKED_REVERSE
    - RANKED_COMPLETION_TIME
    - BONUS_PER_COMPLETION
    type: string
    x-enum-varnames:
    - PRESENCE
    - POINTS_FROM_VALUE
    - RANKED_TIME
    - RANKED_VALUE
    - RANKED_REVERSE
    - RANKED_COMPLETION
    - BONUS_PER_COMPLETION
  repository.ScoringPresetType:
    enum:
    - OBJECTIVE
    - CATEGORY
    type: string
    x-enum-varnames:
    - OBJECTIVE
    - CATEGORY
  scoring.ScoreType:
    enum:
    - OBJECTIVE
    - CATEGORY
    type: string
    x-enum-varnames:
    - OBJECTIVE
    - CATEGORY
info:
  contact:
    email: Liberatorist@gmail.com
    name: Liberator
  description: This is the backend API for the BPL project.
  title: BPL Backend API
  version: "2.0"
paths:
  /events:
    get:
      description: Fetches all events
      operationId: GetEvents
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controller.EventResponse'
            type: array
      tags:
      - event
    post:
      consumes:
      - application/json
      description: Creates or updates an event
      operationId: CreateEvent
      parameters:
      - description: Event to create
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/controller.EventCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.EventResponse'
      tags:
      - event
  /events/{event_id}:
    delete:
      description: Deletes an event
      operationId: DeleteEvent
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      tags:
      - event
    get:
      consumes:
      - application/json
      description: Gets an event by id
      operationId: GetEvent
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.EventResponse'
      tags:
      - event
  /events/{event_id}/scoring-presets:
    get:
      description: Fetches the scoring presets for the current event
      operationId: GetScoringPresetsForEvent
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controller.ScoringPresetResponse'
            type: array
      tags:
      - scoring
  /events/{event_id}/signups:
    get:
      description: Fetches all signups for the event
      operationId: GetEventSignups
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              items:
                $ref: '#/definitions/controller.SignupResponse'
              type: array
            type: object
      tags:
      - signup
  /events/{event_id}/signups/self:
    delete:
      description: Deletes the authenticated user's signup for the event
      operationId: DeleteSignup
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      tags:
      - signup
    get:
      description: Fetches an authenticated user's signup for the event
      operationId: GetPersonalSignup
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SignupResponse'
      tags:
      - signup
    put:
      consumes:
      - application/json
      description: Creates a signup for the authenticated user
      operationId: CreateSignup
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.SignupResponse'
      tags:
      - signup
  /events/{event_id}/status:
    get:
      consumes:
      - application/json
      description: Gets the users application status for an event
      operationId: GetEventStatusForUser
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.EventStatusResponse'
      tags:
      - event
  /events/{event_id}/submissions:
    get:
      description: Fetches all submissions for an event
      operationId: GetSubmissions
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controller.SubmissionResponse'
            type: array
      tags:
      - submission
    put:
      consumes:
      - application/json
      description: Submits a bounty for an event
      operationId: SubmitBounty
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.SubmissionResponse'
      tags:
      - submission
  /events/{event_id}/submissions/{submission_id}:
    delete:
      description: Deletes a submission
      operationId: DeleteSubmission
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: integer
      - description: Submission ID
        in: path
        name: submission_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      tags:
      - submission
  /events/{event_id}/submissions/{submission_id}/review:
    put:
      consumes:
      - application/json
      description: Reviews a submission
      operationId: ReviewSubmission
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: integer
      - description: Submission ID
        in: path
        name: submission_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SubmissionResponse'
      tags:
      - submission
  /events/{event_id}/teams:
    get:
      description: Fetches all teams for an event
      operationId: GetTeams
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controller.TeamResponse'
            type: array
      tags:
      - team
    put:
      consumes:
      - application/json
      description: Creates a team for an event
      operationId: CreateTeam
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.TeamResponse'
      tags:
      - team
  /events/{event_id}/teams/{team_id}:
    delete:
      description: Deletes a team
      operationId: DeleteTeam
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: integer
      - description: Team ID
        in: path
        name: team_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      tags:
      - team
    get:
      description: Fetches a team by id
      operationId: GetTeam
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: integer
      - description: Team ID
        in: path
        name: team_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.TeamResponse'
      tags:
      - team
  /events/{event_id}/teams/users:
    put:
      consumes:
      - application/json
      description: Adds users to teams
      operationId: AddUsersToTeams
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      tags:
      - team
      - user
  /events/{event_id}/users:
    get:
      description: Fetches all users for an event
      operationId: GetUsersForEvent
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              items:
                $ref: '#/definitions/controller.MinimalUserResponse'
              type: array
            type: object
      tags:
      - user
  /events/current:
    get:
      description: Fetches the current event
      operationId: GetCurrentEvent
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.EventResponse'
      tags:
      - event
  /oauth2/discord:
    get:
      description: Redirects to discord oauth
      produces:
      - application/json
      responses:
        "302":
          description: Found
      tags:
      - oauth
  /oauth2/discord/bot-login:
    post:
      consumes:
      - application/json
      description: Logs in the discord bot
      operationId: LoginDiscordBot
      parameters:
      - description: Discord bot login body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.DiscordBotLoginBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      tags:
      - oauth
  /oauth2/discord/redirect:
    get:
      description: Redirect handler for discord oauth
      produces:
      - text/html
      responses:
        "200":
          description: OK
      tags:
      - oauth
  /oauth2/twitch:
    get:
      description: Redirects to twitch oauth
      produces:
      - application/json
      responses:
        "302":
          description: Found
      tags:
      - oauth
  /oauth2/twitch/redirect:
    get:
      description: Redirect handler for twitch oauth
      produces:
      - text/html
      responses:
        "200":
          description: OK
      tags:
      - oauth
  /scores/latest:
    get:
      description: Fetches the latest scores for the current event
      operationId: GetLatestScoresForEvent
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controller.ScoreResponse'
            type: array
      tags:
      - scores
  /scoring/categories:
    get:
      description: Fetches the rules for the current event
      operationId: GetRulesForEvent
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controller.CategoryResponse'
            type: array
      tags:
      - scoring
  /scoring/categories/{id}:
    delete:
      description: Deletes a scoring category
      operationId: DeleteCategory
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      tags:
      - scoring
    get:
      description: Fetches a scoring category by id
      operationId: GetScoringCategory
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CategoryResponse'
      tags:
      - scoring
  /scoring/conditions:
    put:
      consumes:
      - application/json
      description: Creates a condition
      operationId: CreateCondition
      parameters:
      - description: Condition to create
        in: body
        name: condition
        required: true
        schema:
          $ref: '#/definitions/controller.ConditionCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.ConditionResponse'
      tags:
      - condition
  /scoring/conditions/{id}:
    delete:
      description: Deletes a condition
      operationId: DeleteCondition
      parameters:
      - description: Condition ID
        in: path
        name: id
        required: true
        type: integer
      responses: {}
      tags:
      - condition
  /scoring/objectives:
    put:
      consumes:
      - application/json
      description: Creates a new objective
      operationId: CreateObjective
      parameters:
      - description: Objective to create
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.ObjectiveCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.ObjectiveResponse'
      tags:
      - objective
  /scoring/objectives/{id}:
    delete:
      description: Deletes an objective
      operationId: DeleteObjective
      parameters:
      - description: Objective ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      tags:
      - objective
    get:
      description: Gets an objective by id
      operationId: GetObjective
      parameters:
      - description: Objective ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.ObjectiveResponse'
      tags:
      - objective
  /scoring/presets:
    put:
      consumes:
      - application/json
      description: Creates a new scoring preset
      operationId: CreateScoringPreset
      parameters:
      - description: Preset to create
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.ScoringPresetCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.ScoringPresetResponse'
      tags:
      - scoring
  /scoring/presets/{id}:
    get:
      description: Fetches a scoring preset by id
      operationId: GetScoringPreset
      parameters:
      - description: Preset ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.ScoringPresetResponse'
      tags:
      - scoring
  /streams:
    get:
      description: Fetches all twitch streams for the current event
      operationId: GetStreams
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/client.Stream'
            type: array
      tags:
      - streams
  /users:
    get:
      description: Fetches all users
      operationId: GetAllUsers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controller.UserAdminResponse'
            type: array
      security:
      - ApiKeyAuth: []
      tags:
      - user
  /users/{userId}:
    patch:
      consumes:
      - application/json
      description: Changes the permissions of a user
      operationId: ChangePermissions
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      - description: Permissions
        in: body
        name: permissions
        required: true
        schema:
          items:
            $ref: '#/definitions/repository.Permission'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      tags:
      - user
  /users/logout:
    post:
      description: Logs out the authenticated user
      operationId: Logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      tags:
      - user
  /users/remove-auth:
    post:
      description: Removes an authentication provider from the authenticated user
      operationId: RemoveAuth
      parameters:
      - description: Provider
        in: query
        name: provider
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.UserResponse'
      security:
      - ApiKeyAuth: []
      tags:
      - user
  /users/self:
    get:
      description: Fetches the authenticated user
      operationId: GetUser
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.UserResponse'
      security:
      - ApiKeyAuth: []
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: Updates the authenticated users display name
      operationId: UpdateUser
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controller.UserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.UserResponse'
      security:
      - ApiKeyAuth: []
      tags:
      - user
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
