// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Liberator",
            "email": "Liberatorist@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/events": {
            "get": {
                "description": "Fetches all events",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "event"
                ],
                "operationId": "GetEvents",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/controller.EventResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Creates or updates an event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "event"
                ],
                "operationId": "CreateEvent",
                "parameters": [
                    {
                        "description": "Event to create",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.EventCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/controller.EventResponse"
                        }
                    }
                }
            }
        },
        "/events/current": {
            "get": {
                "description": "Fetches the current event",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "event"
                ],
                "operationId": "GetCurrentEvent",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.EventResponse"
                        }
                    }
                }
            }
        },
        "/events/{event_id}": {
            "get": {
                "description": "Gets an event by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "event"
                ],
                "operationId": "GetEvent",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/controller.EventResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an event",
                "tags": [
                    "event"
                ],
                "operationId": "DeleteEvent",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/events/{event_id}/scores/latest": {
            "get": {
                "description": "Fetches the latest scores for the current event",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scores"
                ],
                "operationId": "GetLatestScoresForEvent",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/controller.ScoreResponse"
                            }
                        }
                    }
                }
            }
        },
        "/events/{event_id}/scoring-presets": {
            "get": {
                "description": "Fetches the scoring presets for the current event",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scoring"
                ],
                "operationId": "GetScoringPresetsForEvent",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/controller.ScoringPresetResponse"
                            }
                        }
                    }
                }
            }
        },
        "/events/{event_id}/signups": {
            "get": {
                "description": "Fetches all signups for the event",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "signup"
                ],
                "operationId": "GetEventSignups",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/controller.SignupResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/events/{event_id}/signups/self": {
            "get": {
                "description": "Fetches an authenticated user's signup for the event",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "signup"
                ],
                "operationId": "GetPersonalSignup",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.SignupResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Creates a signup for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "signup"
                ],
                "operationId": "CreateSignup",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/controller.SignupResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes the authenticated user's signup for the event",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "signup"
                ],
                "operationId": "DeleteSignup",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/events/{event_id}/status": {
            "get": {
                "description": "Gets the users application status for an event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "event"
                ],
                "operationId": "GetEventStatusForUser",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.EventStatusResponse"
                        }
                    }
                }
            }
        },
        "/events/{event_id}/submissions": {
            "get": {
                "description": "Fetches all submissions for an event",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "submission"
                ],
                "operationId": "GetSubmissions",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/controller.SubmissionResponse"
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Submits a bounty for an event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "submission"
                ],
                "operationId": "SubmitBounty",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/controller.SubmissionResponse"
                        }
                    }
                }
            }
        },
        "/events/{event_id}/submissions/{submission_id}": {
            "delete": {
                "description": "Deletes a submission",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "submission"
                ],
                "operationId": "DeleteSubmission",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Submission ID",
                        "name": "submission_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/events/{event_id}/submissions/{submission_id}/review": {
            "put": {
                "description": "Reviews a submission",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "submission"
                ],
                "operationId": "ReviewSubmission",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Submission ID",
                        "name": "submission_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.SubmissionResponse"
                        }
                    }
                }
            }
        },
        "/events/{event_id}/teams": {
            "get": {
                "description": "Fetches all teams for an event",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "team"
                ],
                "operationId": "GetTeams",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/controller.TeamResponse"
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Creates a team for an event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "team"
                ],
                "operationId": "CreateTeam",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/controller.TeamResponse"
                        }
                    }
                }
            }
        },
        "/events/{event_id}/teams/users": {
            "put": {
                "description": "Adds users to teams",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "team",
                    "user"
                ],
                "operationId": "AddUsersToTeams",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/events/{event_id}/teams/{team_id}": {
            "get": {
                "description": "Fetches a team by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "team"
                ],
                "operationId": "GetTeam",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Team ID",
                        "name": "team_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.TeamResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a team",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "team"
                ],
                "operationId": "DeleteTeam",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Team ID",
                        "name": "team_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/events/{event_id}/users": {
            "get": {
                "description": "Fetches all users for an event",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "operationId": "GetUsersForEvent",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/controller.MinimalUserResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/oauth2/discord": {
            "get": {
                "description": "Redirects to discord oauth",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "oauth"
                ],
                "responses": {
                    "302": {
                        "description": "Found"
                    }
                }
            }
        },
        "/oauth2/discord/bot-login": {
            "post": {
                "description": "Logs in the discord bot",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "oauth"
                ],
                "operationId": "LoginDiscordBot",
                "parameters": [
                    {
                        "description": "Discord bot login body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.DiscordBotLoginBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/oauth2/discord/redirect": {
            "get": {
                "description": "Redirect handler for discord oauth",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "oauth"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/oauth2/twitch": {
            "get": {
                "description": "Redirects to twitch oauth",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "oauth"
                ],
                "responses": {
                    "302": {
                        "description": "Found"
                    }
                }
            }
        },
        "/oauth2/twitch/redirect": {
            "get": {
                "description": "Redirect handler for twitch oauth",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "oauth"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/scoring/categories": {
            "get": {
                "description": "Fetches the rules for the current event",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scoring"
                ],
                "operationId": "GetRulesForEvent",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/controller.CategoryResponse"
                            }
                        }
                    }
                }
            }
        },
        "/scoring/categories/{id}": {
            "get": {
                "description": "Fetches a scoring category by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scoring"
                ],
                "operationId": "GetScoringCategory",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.CategoryResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a scoring category",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scoring"
                ],
                "operationId": "DeleteCategory",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/scoring/conditions": {
            "put": {
                "description": "Creates a condition",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "condition"
                ],
                "operationId": "CreateCondition",
                "parameters": [
                    {
                        "description": "Condition to create",
                        "name": "condition",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.ConditionCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/controller.ConditionResponse"
                        }
                    }
                }
            }
        },
        "/scoring/conditions/{id}": {
            "delete": {
                "description": "Deletes a condition",
                "tags": [
                    "condition"
                ],
                "operationId": "DeleteCondition",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Condition ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/scoring/objectives": {
            "put": {
                "description": "Creates a new objective",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "objective"
                ],
                "operationId": "CreateObjective",
                "parameters": [
                    {
                        "description": "Objective to create",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.ObjectiveCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/controller.ObjectiveResponse"
                        }
                    }
                }
            }
        },
        "/scoring/objectives/{id}": {
            "get": {
                "description": "Gets an objective by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "objective"
                ],
                "operationId": "GetObjective",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Objective ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.ObjectiveResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an objective",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "objective"
                ],
                "operationId": "DeleteObjective",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Objective ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/scoring/presets": {
            "put": {
                "description": "Creates a new scoring preset",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scoring"
                ],
                "operationId": "CreateScoringPreset",
                "parameters": [
                    {
                        "description": "Preset to create",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.ScoringPresetCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.ScoringPresetResponse"
                        }
                    }
                }
            }
        },
        "/scoring/presets/{id}": {
            "get": {
                "description": "Fetches a scoring preset by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scoring"
                ],
                "operationId": "GetScoringPreset",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preset ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.ScoringPresetResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a scoring preset by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scoring"
                ],
                "operationId": "DeleteScoringPreset",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Preset ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/streams": {
            "get": {
                "description": "Fetches all twitch streams for the current event",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "streams"
                ],
                "operationId": "GetStreams",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/client.Stream"
                            }
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches all users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "operationId": "GetAllUsers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/controller.UserAdminResponse"
                            }
                        }
                    }
                }
            }
        },
        "/users/logout": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Logs out the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "operationId": "Logout",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/users/remove-auth": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Removes an authentication provider from the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "operationId": "RemoveAuth",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Provider",
                        "name": "provider",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.UserResponse"
                        }
                    }
                }
            }
        },
        "/users/self": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "operationId": "GetUser",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.UserResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates the authenticated users display name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "operationId": "UpdateUser",
                "parameters": [
                    {
                        "description": "User",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.UserUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.UserResponse"
                        }
                    }
                }
            }
        },
        "/users/{userId}": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Changes the permissions of a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "operationId": "ChangePermissions",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Permissions",
                        "name": "permissions",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/repository.Permission"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        }
    },
    "definitions": {
        "client.Stream": {
            "type": "object",
            "properties": {
                "backend_user_id": {
                    "type": "integer"
                },
                "game_id": {
                    "type": "string"
                },
                "game_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_mature": {
                    "type": "boolean"
                },
                "language": {
                    "type": "string"
                },
                "started_at": {
                    "type": "string"
                },
                "tag_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "thumbnail_url": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "user_login": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                },
                "viewer_count": {
                    "type": "integer"
                }
            }
        },
        "controller.ApplicationStatus": {
            "type": "string",
            "enum": [
                "applied",
                "accepted",
                "waitlisted",
                "none"
            ],
            "x-enum-varnames": [
                "ApplicationStatusApplied",
                "ApplicationStatusAccepted",
                "ApplicationStatusWaitlisted",
                "ApplicationStatusNone"
            ]
        },
        "controller.CategoryCreate": {
            "type": "object",
            "required": [
                "name",
                "parent_id"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "parent_id": {
                    "type": "integer"
                },
                "scoring_preset_id": {
                    "type": "integer"
                }
            }
        },
        "controller.CategoryResponse": {
            "type": "object",
            "required": [
                "id",
                "name",
                "objectives",
                "sub_categories"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "objectives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controller.ObjectiveResponse"
                    }
                },
                "scoring_preset_id": {
                    "type": "integer"
                },
                "sub_categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controller.CategoryResponse"
                    }
                }
            }
        },
        "controller.ConditionCreate": {
            "type": "object",
            "required": [
                "field",
                "objective_id",
                "operator",
                "value"
            ],
            "properties": {
                "field": {
                    "enum": [
                        "BASE_TYPE",
                        "NAME",
                        "TYPE_LINE",
                        "RARITY",
                        "ILVL",
                        "FRAME_TYPE",
                        "TALISMAN_TIER",
                        "ENCHANT_MODS",
                        "EXPLICIT_MODS",
                        "IMPLICIT_MODS",
                        "CRAFTED_MODS",
                        "FRACTURED_MODS",
                        "SIX_LINK"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/repository.ItemField"
                        }
                    ]
                },
                "id": {
                    "type": "integer"
                },
                "objective_id": {
                    "type": "integer"
                },
                "operator": {
                    "enum": [
                        "EQ",
                        "NEQ",
                        "GT",
                        "GTE",
                        "LT",
                        "LTE",
                        "IN",
                        "NOT_IN",
                        "MATCHES",
                        "CONTAINS",
                        "CONTAINS_ALL",
                        "CONTAINS_MATCH",
                        "CONTAINS_ALL_MATCHES"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/repository.Operator"
                        }
                    ]
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "controller.ConditionResponse": {
            "type": "object",
            "required": [
                "field",
                "id",
                "operator",
                "value"
            ],
            "properties": {
                "field": {
                    "$ref": "#/definitions/repository.ItemField"
                },
                "id": {
                    "type": "integer"
                },
                "operator": {
                    "$ref": "#/definitions/repository.Operator"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "controller.DiscordBotLoginBody": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "controller.EventCreate": {
            "type": "object",
            "required": [
                "application_start_time",
                "event_end_time",
                "event_start_time",
                "max_size",
                "name"
            ],
            "properties": {
                "application_start_time": {
                    "type": "string"
                },
                "event_end_time": {
                    "type": "string"
                },
                "event_start_time": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_current": {
                    "type": "boolean"
                },
                "max_size": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "controller.EventResponse": {
            "type": "object",
            "required": [
                "application_start_time",
                "event_end_time",
                "event_start_time",
                "id",
                "is_current",
                "max_size",
                "name",
                "scoring_category_id",
                "teams"
            ],
            "properties": {
                "application_start_time": {
                    "type": "string"
                },
                "event_end_time": {
                    "type": "string"
                },
                "event_start_time": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_current": {
                    "type": "boolean"
                },
                "max_size": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "scoring_category_id": {
                    "type": "integer"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controller.TeamResponse"
                    }
                }
            }
        },
        "controller.EventStatusResponse": {
            "type": "object",
            "required": [
                "application_status"
            ],
            "properties": {
                "application_status": {
                    "$ref": "#/definitions/controller.ApplicationStatus"
                },
                "team_id": {
                    "type": "integer"
                }
            }
        },
        "controller.MinimalUserResponse": {
            "type": "object",
            "required": [
                "display_name",
                "id"
            ],
            "properties": {
                "display_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "controller.NonSensitiveUserResponse": {
            "type": "object",
            "required": [
                "display_name",
                "id"
            ],
            "properties": {
                "account_name": {
                    "type": "string"
                },
                "discord_id": {
                    "type": "string"
                },
                "discord_name": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "twitch_id": {
                    "type": "string"
                },
                "twitch_name": {
                    "type": "string"
                }
            }
        },
        "controller.ObjectiveCreate": {
            "type": "object",
            "required": [
                "aggregation",
                "category_id",
                "conditions",
                "name",
                "number_field",
                "objective_type",
                "required_number"
            ],
            "properties": {
                "aggregation": {
                    "$ref": "#/definitions/repository.AggregationType"
                },
                "category_id": {
                    "type": "integer"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controller.ConditionCreate"
                    }
                },
                "extra": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "number_field": {
                    "$ref": "#/definitions/repository.NumberField"
                },
                "objective_type": {
                    "$ref": "#/definitions/repository.ObjectiveType"
                },
                "required_number": {
                    "type": "integer"
                },
                "scoring_preset_id": {
                    "type": "integer"
                },
                "valid_from": {
                    "type": "string"
                },
                "valid_to": {
                    "type": "string"
                }
            }
        },
        "controller.ObjectiveResponse": {
            "type": "object",
            "required": [
                "aggregation",
                "category_id",
                "conditions",
                "extra",
                "id",
                "name",
                "number_field",
                "objective_type",
                "required_number"
            ],
            "properties": {
                "aggregation": {
                    "$ref": "#/definitions/repository.AggregationType"
                },
                "category_id": {
                    "type": "integer"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controller.ConditionResponse"
                    }
                },
                "extra": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "number_field": {
                    "$ref": "#/definitions/repository.NumberField"
                },
                "objective_type": {
                    "$ref": "#/definitions/repository.ObjectiveType"
                },
                "required_number": {
                    "type": "integer"
                },
                "scoring_preset_id": {
                    "type": "integer"
                },
                "valid_from": {
                    "type": "string"
                },
                "valid_to": {
                    "type": "string"
                }
            }
        },
        "controller.ScoreResponse": {
            "type": "object",
            "required": [
                "finished",
                "id",
                "number",
                "points",
                "rank",
                "team_id",
                "timestamp",
                "type",
                "user_id"
            ],
            "properties": {
                "finished": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "number": {
                    "type": "integer"
                },
                "points": {
                    "type": "integer"
                },
                "rank": {
                    "type": "integer"
                },
                "team_id": {
                    "type": "integer"
                },
                "timestamp": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/scoring.ScoreType"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "controller.ScoringPresetCreate": {
            "type": "object",
            "required": [
                "event_id",
                "name",
                "points",
                "scoring_method",
                "type"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "event_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "points": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "scoring_method": {
                    "$ref": "#/definitions/repository.ScoringMethod"
                },
                "type": {
                    "$ref": "#/definitions/repository.ScoringPresetType"
                }
            }
        },
        "controller.ScoringPresetResponse": {
            "type": "object",
            "required": [
                "description",
                "id",
                "name",
                "points",
                "scoring_method",
                "type"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "points": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "scoring_method": {
                    "$ref": "#/definitions/repository.ScoringMethod"
                },
                "type": {
                    "$ref": "#/definitions/repository.ScoringPresetType"
                }
            }
        },
        "controller.SignupResponse": {
            "type": "object",
            "required": [
                "expected_playtime",
                "id",
                "timestamp",
                "user"
            ],
            "properties": {
                "expected_playtime": {
                    "$ref": "#/definitions/repository.ExpectedPlayTime"
                },
                "id": {
                    "type": "integer"
                },
                "team_id": {
                    "type": "integer"
                },
                "timestamp": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/controller.NonSensitiveUserResponse"
                }
            }
        },
        "controller.SubmissionResponse": {
            "type": "object",
            "required": [
                "approval_status",
                "comment",
                "id",
                "number",
                "proof",
                "timestamp"
            ],
            "properties": {
                "approval_status": {
                    "$ref": "#/definitions/repository.ApprovalStatus"
                },
                "comment": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "number": {
                    "type": "integer"
                },
                "objective": {
                    "$ref": "#/definitions/controller.ObjectiveResponse"
                },
                "proof": {
                    "type": "string"
                },
                "review_comment": {
                    "type": "string"
                },
                "reviewer_id": {
                    "type": "integer"
                },
                "team_id": {
                    "type": "integer"
                },
                "timestamp": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/controller.NonSensitiveUserResponse"
                }
            }
        },
        "controller.TeamResponse": {
            "type": "object",
            "required": [
                "allowed_classes",
                "event_id",
                "id",
                "name"
            ],
            "properties": {
                "allowed_classes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "event_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "controller.UserAdminResponse": {
            "type": "object",
            "required": [
                "display_name",
                "id",
                "permissions"
            ],
            "properties": {
                "account_name": {
                    "type": "string"
                },
                "discord_id": {
                    "type": "string"
                },
                "discord_name": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/repository.Permission"
                    }
                },
                "twitch_id": {
                    "type": "string"
                },
                "twitch_name": {
                    "type": "string"
                }
            }
        },
        "controller.UserResponse": {
            "type": "object",
            "required": [
                "display_name",
                "id"
            ],
            "properties": {
                "account_name": {
                    "type": "string"
                },
                "discord_id": {
                    "type": "string"
                },
                "discord_name": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/repository.Permission"
                    }
                },
                "token_expiry_timestamp": {
                    "type": "string"
                },
                "twitch_id": {
                    "type": "string"
                },
                "twitch_name": {
                    "type": "string"
                }
            }
        },
        "controller.UserUpdate": {
            "type": "object",
            "required": [
                "display_name"
            ],
            "properties": {
                "display_name": {
                    "type": "string"
                }
            }
        },
        "repository.AggregationType": {
            "type": "string",
            "enum": [
                "SUM_LATEST",
                "EARLIEST",
                "EARLIEST_FRESH_ITEM",
                "MAXIMUM",
                "MINIMUM"
            ],
            "x-enum-varnames": [
                "SUM_LATEST",
                "EARLIEST",
                "EARLIEST_FRESH_ITEM",
                "MAXIMUM",
                "MINIMUM"
            ]
        },
        "repository.ApprovalStatus": {
            "type": "string",
            "enum": [
                "APPROVED",
                "REJECTED",
                "PENDING"
            ],
            "x-enum-varnames": [
                "APPROVED",
                "REJECTED",
                "PENDING"
            ]
        },
        "repository.ExpectedPlayTime": {
            "type": "string",
            "enum": [
                "VERY_LOW",
                "LOW",
                "MEDIUM",
                "HIGH",
                "VERY_HIGH",
                "EXTREME",
                "NO_LIFE"
            ],
            "x-enum-varnames": [
                "VeryLow",
                "Low",
                "Medium",
                "High",
                "VeryHigh",
                "Extreme",
                "NoLife"
            ]
        },
        "repository.ItemField": {
            "type": "string",
            "enum": [
                "BASE_TYPE",
                "NAME",
                "TYPE_LINE",
                "RARITY",
                "ILVL",
                "FRAME_TYPE",
                "TALISMAN_TIER",
                "ENCHANT_MODS",
                "EXPLICIT_MODS",
                "IMPLICIT_MODS",
                "CRAFTED_MODS",
                "FRACTURED_MODS",
                "SIX_LINK"
            ],
            "x-enum-varnames": [
                "BASE_TYPE",
                "NAME",
                "TYPE_LINE",
                "RARITY",
                "ILVL",
                "FRAME_TYPE",
                "TALISMAN_TIER",
                "ENCHANT_MODS",
                "EXPLICIT_MODS",
                "IMPLICIT_MODS",
                "CRAFTED_MODS",
                "FRACTURED_MODS",
                "SIX_LINK"
            ]
        },
        "repository.NumberField": {
            "type": "string",
            "enum": [
                "STACK_SIZE",
                "PLAYER_LEVEL",
                "PLAYER_XP",
                "SUBMISSION_VALUE"
            ],
            "x-enum-varnames": [
                "STACK_SIZE",
                "PLAYER_LEVEL",
                "PLAYER_XP",
                "SUBMISSION_VALUE"
            ]
        },
        "repository.ObjectiveType": {
            "type": "string",
            "enum": [
                "ITEM",
                "PLAYER",
                "SUBMISSION"
            ],
            "x-enum-varnames": [
                "ITEM",
                "PLAYER",
                "SUBMISSION"
            ]
        },
        "repository.Operator": {
            "type": "string",
            "enum": [
                "EQ",
                "NEQ",
                "GT",
                "GTE",
                "LT",
                "LTE",
                "IN",
                "NOT_IN",
                "MATCHES",
                "CONTAINS",
                "CONTAINS_ALL",
                "CONTAINS_MATCH",
                "CONTAINS_ALL_MATCHES"
            ],
            "x-enum-varnames": [
                "EQ",
                "NEQ",
                "GT",
                "GTE",
                "LT",
                "LTE",
                "IN",
                "NOT_IN",
                "MATCHES",
                "CONTAINS",
                "CONTAINS_ALL",
                "CONTAINS_MATCH",
                "CONTAINS_ALL_MATCHES"
            ]
        },
        "repository.Permission": {
            "type": "string",
            "enum": [
                "admin",
                "command_team"
            ],
            "x-enum-varnames": [
                "PermissionAdmin",
                "PermissionCommandTeam"
            ]
        },
        "repository.ScoringMethod": {
            "type": "string",
            "enum": [
                "PRESENCE",
                "POINTS_FROM_VALUE",
                "RANKED_TIME",
                "RANKED_VALUE",
                "RANKED_REVERSE",
                "RANKED_COMPLETION_TIME",
                "BONUS_PER_COMPLETION"
            ],
            "x-enum-varnames": [
                "PRESENCE",
                "POINTS_FROM_VALUE",
                "RANKED_TIME",
                "RANKED_VALUE",
                "RANKED_REVERSE",
                "RANKED_COMPLETION",
                "BONUS_PER_COMPLETION"
            ]
        },
        "repository.ScoringPresetType": {
            "type": "string",
            "enum": [
                "OBJECTIVE",
                "CATEGORY"
            ],
            "x-enum-varnames": [
                "OBJECTIVE",
                "CATEGORY"
            ]
        },
        "scoring.ScoreType": {
            "type": "string",
            "enum": [
                "OBJECTIVE",
                "CATEGORY"
            ],
            "x-enum-varnames": [
                "OBJECTIVE",
                "CATEGORY"
            ]
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "2.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "BPL Backend API",
	Description:      "This is the backend API for the BPL project.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
